{"version":3,"sources":["img/avatar.jpeg","components/SocialMediaButton/index.js","screens/Home/styles.js","screens/Home/index.js","serviceWorker.js","index.js"],"names":["module","exports","SocialMediaButton","onClick","iconName","uri","id","href","target","rel","Icon","name","size","style","color","defaultProps","marginTop","role","marginBottom","avatar","require","socialMediaIcons","PureComponent","constructor","super","this","state","bgImage","render","Grid","background","backgroundSize","height","padded","Row","centered","Column","width","verticalAlign","textAlign","Image","src","rounded","alt","Header","as","styles","map","i","key","Boolean","window","location","hostname","match","ReactGA","initialize","process","REACT_APP_GA","pageview","pathname","search","ReactDOM","Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,qC,8ICW5B,SAASC,GAAoBC,UAAF,SAAWC,EAAX,IAAqBC,IAC7D,OACE,uBACEC,GAAE,UAAKF,EAAL,UACFG,KAAMF,EACNG,OAAO,SACPC,IAAI,sBACJN,QAAS,IAAMA,KAEf,kBAACO,EAAA,EAAD,CAAMC,KAAMP,EAAUQ,KAAK,MAAMC,MAAO,CAAEC,MAAO,YAKvDZ,EAAkBa,aAAe,CAC/BZ,QAAS,UC1BI,OACbQ,KAAM,CACJG,MAAO,OACPE,UAAW,IAEbC,KAAM,CACJH,MAAO,OACPI,aAAc,KCClB,MAAMC,EAASC,EAAQ,KAMjBC,EAAmB,CACvB,CACEjB,SAAU,SACVC,IAAK,6BAEP,CACED,SAAU,WACVC,IAAK,uDAIM,oBAAciB,gBAC3BC,cACEC,QAEAC,KAAKC,MAAQ,CACXC,QAAS,2DAIbC,SAAU,MACAD,EAAYF,KAAKC,MAAjBC,QAER,OACE,kBAACE,EAAA,EAAD,CACEhB,MAAO,CACLiB,WAAW,6DAAD,OAA+DH,EAA/D,KACVI,eAAgB,QAChBC,OAAQ,SAEVC,QAAM,GAEN,kBAACJ,EAAA,EAAKK,IAAN,CAAUC,UAAQ,GAChB,kBAACN,EAAA,EAAKO,OAAN,CAAaC,MAAO,EAAGC,cAAc,SAASC,UAAU,UACtD,kBAACC,EAAA,EAAD,CAAOC,IAAKtB,EAAQuB,SAAO,EAAC9B,KAAK,QAAQuB,UAAQ,EAACQ,IAAI,WACtD,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKhC,MAAOiC,EAAOnC,MAA9B,kBAGA,kBAACiC,EAAA,EAAD,CAAQC,GAAG,KAAKhC,MAAOiC,EAAO7B,MAA9B,kCAGA,kBAACY,EAAA,EAAKK,IAAN,KACE,kBAACL,EAAA,EAAKO,OAAN,KACGf,EAAiB0B,IAAI,EAAG1C,MAAKD,YAAY4C,IACjC,kBAAC9C,EAAD,CAAmB+C,IAAKD,EAAG5C,SAAUA,EAAUC,IAAKA,YC9CzD6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCRNC,IAAQC,WAAWC,mHAAYC,cAC/BH,IAAQI,SAASR,OAAOC,SAASQ,SAAWT,OAAOC,SAASS,QAE5DC,IAASlC,OAAO,kBAACmC,EAAD,MAAUC,SAASC,eAAe,SDoH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.97c91c88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.268893cf.jpeg\";","/* @flow */\n\nimport React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\ntype Props = {\n  onClick?: Function,\n  iconName: string,\n  uri: string\n};\n\nexport default function SocialMediaButton({ onClick, iconName, uri }: Props) {\n  return (\n    <a\n      id={`${iconName}Button`}\n      href={uri}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      onClick={() => onClick()}\n    >\n      <Icon name={iconName} size=\"big\" style={{ color: 'white' }} />\n    </a>\n  );\n}\n\nSocialMediaButton.defaultProps = {\n  onClick: () => ({})\n};\n","export default {\n  name: {\n    color: '#fff',\n    marginTop: 25\n  },\n  role: {\n    color: '#fff',\n    marginBottom: 30\n  }\n};\n","// @flow\nimport React, { PureComponent } from 'react';\n\nimport { Grid, Image, Icon, Header } from 'semantic-ui-react';\nimport SocialMediaButton from '../../components/SocialMediaButton';\n\nimport styles from './styles';\n\nconst avatar = require('../../img/avatar.jpeg');\n\ntype State = {\n  bgImage: string,\n};\n\nconst socialMediaIcons = [\n  {\n    iconName: 'github',\n    uri: 'https://github.com/mcodex',\n  },\n  {\n    iconName: 'linkedin',\n    uri: 'https://br.linkedin.com/in/mateus-andrade-832bb7b4',\n  },\n];\n\nexport default class extends PureComponent<*, State> {\n  constructor() {\n    super();\n\n    this.state = {\n      bgImage: 'https://source.unsplash.com/collection/3178572/1600x900',\n    };\n  }\n\n  render() {\n    const { bgImage } = this.state;\n\n    return (\n      <Grid\n        style={{\n          background: `linear-gradient(0deg,rgba(0,0,0,0.8),rgba(0,0,0,0.8)),url(${bgImage})`,\n          backgroundSize: 'cover',\n          height: '100vh',\n        }}\n        padded\n      >\n        <Grid.Row centered>\n          <Grid.Column width={8} verticalAlign=\"middle\" textAlign=\"center\">\n            <Image src={avatar} rounded size=\"small\" centered alt=\"Avatar\" />\n            <Header as=\"h1\" style={styles.name}>\n              Mateus Andrade\n            </Header>\n            <Header as=\"h3\" style={styles.role}>\n              Fullstack Javascript Developer\n            </Header>\n            <Grid.Row>\n              <Grid.Column>\n                {socialMediaIcons.map(({ uri, iconName }, i) => {\n                  return <SocialMediaButton key={i} iconName={iconName} uri={uri} />;\n                })}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\n\nimport Home from './screens/Home';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactGA.initialize(process.env.REACT_APP_GA);\nReactGA.pageview(window.location.pathname + window.location.search);\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}