{"version":3,"sources":["assets/img/avatar.jpeg","assets/img/cover.jpg","pages/Home/styles.ts","pages/Home/index.tsx","routes/index.tsx","styles/global.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Container","styled","div","Header","header","MainContainer","main","coverImg","SocialIconsContainer","Home","href","target","rel","src","avatarImg","alt","data-testid","Routes","path","component","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,i0CCIpC,IAAMC,EAAYC,IAAOC,IAAV,KAOTC,EAASF,IAAOG,OAAV,KAiBNC,EAAgBJ,IAAOK,KAAV,IAKyDC,KAmBtEC,EAAuBP,IAAOC,IAAV,KCHlBO,EA1CQ,WACrB,OACE,kBAACT,EAAD,KACE,kBAACG,EAAD,KACE,uBACEO,KAAK,6CACLC,OAAO,SACPC,IAAI,uBAEJ,2BACE,+CAEF,kBAAC,IAAD,QAGJ,kBAACP,EAAD,KACE,yBAAKQ,IAAKC,IAAWC,IAAI,mBACzB,8CACA,qEACA,kBAACP,EAAD,KACE,uBACEQ,cAAY,eACZN,KAAK,4BACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,OAEF,uBACEI,cAAY,iBACZN,KAAK,qDACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,WC9BGK,EANU,kBACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWV,M,whBCLhBW,kBAAf,KCUoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fae2cc89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.268893cf.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/cover.af58b5cf.jpg\";","import styled from 'styled-components';\n\nimport coverImg from '../../assets/img/cover.jpg';\n\nexport const Container = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  height: 100%;\n`;\n\nexport const Header = styled.header`\n  display: flex;\n  place-content: center flex-end;\n\n  a {\n    display: flex;\n    color: #fff;\n    place-content: center;\n    flex-direction: row;\n    text-decoration: none;\n\n    svg {\n      margin-top: 2px;\n    }\n  }\n`;\n\nexport const MainContainer = styled.main`\n  display: flex;\n  flex: 1;\n  flex-grow: 1;\n  flex-direction: column;\n  background: linear-gradient(0deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url(${coverImg});\n  background-size: cover;\n  place-content: center;\n  text-align: center;\n\n  h3 {\n    margin: 5px 0;\n  }\n\n  img {\n    width: 200px;\n    height: 200px;\n    border-radius: 50%;\n    align-self: center;\n    margin-bottom: 20px;\n    border: 2px solid #fff;\n  }\n`;\n\nexport const SocialIconsContainer = styled.div`\n  margin-top: 30px;\n\n  a {\n    margin-right: 5px;\n\n    svg {\n      color: #fff;\n      width: 35px;\n      height: 35px;\n    }\n  }\n`;\n","import React from 'react';\nimport { FaLinkedin, FaGithub, FaChevronRight } from 'react-icons/fa';\n\nimport avatarImg from '../../assets/img/avatar.jpeg';\n\nimport { Container, Header, MainContainer, SocialIconsContainer } from './styles';\n\nconst Home: React.FC = () => {\n  return (\n    <Container>\n      <Header>\n        <a\n          href=\"https://github.com/mCodex/mcodex.github.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <p>\n            <small>Source Code</small>\n          </p>\n          <FaChevronRight />\n        </a>\n      </Header>\n      <MainContainer>\n        <img src={avatarImg} alt=\"Mateus Andrade\" />\n        <h1>Mateus Andrade</h1>\n        <h3>React/NodeJS & React-Native Developer</h3>\n        <SocialIconsContainer>\n          <a\n            data-testid=\"githubButton\"\n            href=\"https://github.com/mcodex\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <FaGithub />\n          </a>\n          <a\n            data-testid=\"linkedinButton\"\n            href=\"https://br.linkedin.com/in/mateus-andrade-832bb7b4\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <FaLinkedin />\n          </a>\n        </SocialIconsContainer>\n      </MainContainer>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from '../pages/Home';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" component={Home} />\n  </Switch>\n);\n\nexport default Routes;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  html, body, #root {\n    height: 100%;\n    background-color: #000;\n  }\n\n  body {\n    color: #FFF;\n    -webkit-font-smoothing: antialised;\n  }\n\n  body, input, button {\n    font: 16px 'Montserrat', sans-serif;\n  }\n\n  #root {\n    margin: 0 auto;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 500;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Routes from './routes';\n\nimport GlobalStyle from './styles/global';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes />\n      <GlobalStyle />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}